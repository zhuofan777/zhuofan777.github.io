<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>android学习1</title>
    <link href="/2020/03/05/android%E5%AD%A6%E4%B9%A01/"/>
    <url>/2020/03/05/android%E5%AD%A6%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio下的APP目录结构"><a href="#Android-Studio下的APP目录结构" class="headerlink" title="Android Studio下的APP目录结构"></a>Android Studio下的APP目录结构</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​        一个AS（全称Android Studio）项目由通常由<strong>应用程序模块和库模块</strong>组成，应用程序模块是可以单独的运行的，而库模块只能够依附于应用程序模块才能够运行，自己是无法独立运行的；</p><p>​        库模块也是有res、java、AndroidManifest文件的，和应用程序模块很像。</p><p>​        两者主要的区别在于库模块内的 build.gradle 文件是标记为 <strong>library</strong> 类型的，而应用程序模块内的 build.gradle 文件标记为 <strong>application</strong> 的。</p><hr><h3 id="Project-模式下的结构"><a href="#Project-模式下的结构" class="headerlink" title="Project 模式下的结构"></a>Project 模式下的结构</h3><p><img src="https://s2.ax1x.com/2020/03/05/37nZOf.jpg" srcset="/img/loading.gif" alt="Project"></p><p>1、.gradle和.idea</p><p>​        这两个目录下放置的都是Android Studio自动生成的一些文件。<br>2、app </p><p>​        项目中的代码、资源等内容几乎都是放置在这个目录下的。<br>3、build </p><p>​        主要包含了一些在编译时自动生成的文件。</p><p>4、gradle </p><p>​        这个目录下包含了gradle wrapper的<strong>配置文件</strong>，使用gradle wrapper的方式不需要提前将gradle下载好，而是会自动根据本地的缓存情况决定是否需要联网下载gradle。Android Studio默认没有启动gradle wrapper的方式，如果需要打开，可以点击Android Studio导航栏 –&gt; File –&gt; Settings –&gt; Build，Execution，Deployment –&gt; Gradle，进行配置更改。<br>5、.gitignore </p><p>​        这个文件是用来将指定的目录或文件<strong>排除在版本控制之外</strong>的。</p><p>6、build.gradle</p><p>​        这是项目全局的gradle构建<strong>脚本</strong>。<br>7、gradle.properties</p><p>​        这个文件是全局的gradle<strong>配置文件</strong>，在这里配置的属性将会影响到项目中所有的gradle编译脚本。<br>8、gradlew和gradlew.bat</p><p>​        这两个文件是用来在命令行界面中执行gradle命令的，其中gradlew是在Linux或Mac系统中使用的，gradlew.bat是在Windows系统中使用的。</p><p>9、MyHello.iml </p><p>​        iml 文件是用于标识这是一个IntelliJ IDEA项目。<br>10、local.properties</p><p>​        这个文件用于指定本机中的Android SDK路径，通常内容都是自动生成的，我们并不需要修改。除非你本机中的Android SDK位置发生了变化，那么就将这个文件中的路径改成新的位置即可。<br>11、settings.gradle </p><p>​        这个文件用于<strong>指定项目中所有引入的模块</strong>。<br>12、app （ module ）目录结构</p><h3 id="module的结构"><a href="#module的结构" class="headerlink" title="module的结构"></a>module的结构</h3><p><img src="https://s2.ax1x.com/2020/03/05/37CI4f.jpg" srcset="/img/loading.gif" alt="app"></p><p>​    1、build</p><p>​        这个目录和外层的 build 目录类似，主要也是包含了一些在编译时自动生成的文件，不过它里面的内容会更多更杂，我们不需要过多关心。<br>​    2、libs </p><p>​        如果你的项目中使用到了第三方 jar 包，就需要把这些jar包都放在 libs 目录下，放在这个目录下的jar包都会被自动添加到构建路径里去。</p><p>​    3、src/AndroidTest</p><p>​        此处是用来编写 Android Test 测试用例的，可以对项目进行一些自动化测试。<br>​    4、src/main/java</p><p>​        java目录是放置我们所有 java 代码的地方。<br>​    5、src/main/res</p><p>​        这个目录下的内容就有点多了。简单点说，就是你在项目中使用到的所有图片，布局，字符串等资源都要存放在这个目录下。当然这个目录下还有很多子目录，<strong>图片放在 drawable 目录下，布局放在 layout 目录下，字符串放在 values 目录下，以mipmap 开头的文件夹都是用来放应用图标的</strong>。</p><p>​    6、main/AndroidManifest.xml </p><p>​        这是你整个 Android 项目的配置文件，<strong>你在程序中定义的所有四大组件都需要在这个文件里注册</strong>，另外还可以在这个文件中<strong>给应用程序添加权限声明</strong>。<br>​    7、test</p><p>​        此处是用来编写 Unit Test 测试用例的，是对项目进行自动化测试的另一种方式。<br>​    8、.gitignore</p><p>​        这个文件用于将 app<strong>模块</strong>内的指定的目录或文件排除在版本控制之外，作用和外层的 .gitignore 文件类似。</p><p>​    9、app.iml </p><p>​        IntelliJ IDEA 项目自动生成的文件。<br>​    10、build.gradle </p><p>​        这是 app 模块的 gradle 构建<strong>脚本</strong>，这个文件中会指定很多项目构建相关的配置。<br>​    11、proguard-rules.pro</p><p>​        这个文件用于指定项目代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望代码被别人破解，通常会将代码混淆，从而让破解者难以阅读。</p><hr><h3 id="build-gradle-文件解析"><a href="#build-gradle-文件解析" class="headerlink" title="build.gradle 文件解析"></a>build.gradle 文件解析</h3><p>Android Studio 工程根目录下的 build.gradle 通常不需要修改这个文件中的内容，除非需要添加一些全局的项目构建配置。<br>APP（模块）目录下的 build.gradle 文件是 app（这里是 moduletwo） 模块的 gradle 构建脚本，<strong>一般用来管理 app （这里是 moduletwo）包名、版本以及添加和修改依赖库</strong>。</p><h4 id="工程中根路径下的-build-gradle-文件"><a href="#工程中根路径下的-build-gradle-文件" class="headerlink" title="工程中根路径下的 build.gradle 文件"></a>工程中根路径下的 build.gradle 文件</h4><pre><code class="java">buildscript {    repositories {        google()  //声明代码托管仓库Google        jcenter() //指定代码的托管仓库为 jcenter            }    dependencies {        //声明 gradle的构建版本，        classpath &#39;com.android.tools.build:gradle:3.1.4&#39;        // NOTE: Do not place your application dependencies here; they belong        // in the individual module build.gradle files    }}allprojects {    repositories {        google()   //Jar下载的仓库中心        jcenter()  //Jar下载的仓库中心    }}//开启一个任务，指定每次编译都要清空工程task clean(type: Delete) {    delete rootProject.buildDir</code></pre><h4 id="某个-Module（模块）中的-build-gradle-文件"><a href="#某个-Module（模块）中的-build-gradle-文件" class="headerlink" title="某个 Module（模块）中的 build.gradle 文件"></a>某个 Module（模块）中的 build.gradle 文件</h4><pre><code class="java">apply plugin: &#39;com.android.application&#39; //表示是一个应用程序的模块，可独立运行//apply plugin: &#39;com.android.library&#39; //表示是一个依赖库，不能独立运行android {    compileSdkVersion 25        //指定项目的编译版本    buildToolsVersion &quot;25.0.1“  //指定项目构建工具的版本    defaultConfig {        applicationId &quot;com.hhqy.learnndk2&quot; //指定包名        minSdkVersion 14        //指定最低的兼容的Android系统版本        targetSdkVersion 25     //指定你的目标版本，表示你在该Android系统版本已经做过充分的测试        versionCode 1           //版本号        versionName &quot;1.0&quot;       //版本名称    }    buildTypes { //指定生成安装文件的配置，常有两个子包:release,debug，注：直接运行的都是debug安装文件        release { //用于指定生成正式版安装文件的配置            minifyEnabled false     //指定是否对代码进行混淆，true表示混淆            //指定混淆时使用的规则文件，proguard-android.txt指所有项目通用的混淆规则，     //proguard-rules.pro当前项目特有的混淆规则            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;dependencies { //指定当前项目的所有依赖关系：本地依赖、库依赖、远程依赖    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])//本地依赖    androidTestCompile(&#39;com.android.support.test.espresso:espresso-core:2.2.2&#39;, {        exclude group: &#39;com.android.support&#39;, module: &#39;support-annotations&#39;    }) ‘  //远程依赖，com.android.support是域名部分，appcompat-v7是组名称，25.0.1是版本号    compile &#39;com.android.support:appcompat-v7:25.0.1    compile project(&#39;:hello&#39;)//库依赖    testCompile ‘junit:junit:4.12’  //声明测试用例库    compile &#39;com.android.support.constraint:constraint-layout:1.0.0-alpha7&#39;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习1</title>
    <link href="/2020/03/04/js%E5%AD%A6%E4%B9%A01/"/>
    <url>/2020/03/04/js%E5%AD%A6%E4%B9%A01/</url>
    
    <content type="html"><![CDATA[<h2 id="javascript中的变量作用域"><a href="#javascript中的变量作用域" class="headerlink" title="javascript中的变量作用域"></a>javascript中的变量作用域</h2><p>js中全局作用域分为两种，局部变量和全局变量。<br>局部变量的作用范围是变量所在的函数。<br>例如：</p><pre><code class="javascript">function test(){    var a = 10;};test();console.log(a);</code></pre><p>结果：</p><pre><code>Uncaught ReferenceError: a is not defined</code></pre><p>全局变量定义在函数外，它的作用域是整个代码片段。如果在函数中存在相同命名的局部变量，则在函数中全局变量的值无效，使用局部变量的值。<br>例如下面第一段代码在函数中变量前加var，那么此变量就是新的<strong>局部变量</strong>，即使名称相同也不会影响到先前同名的全局变量。而如果变量前没有var，则默认为全局变量，如第二段。</p><p>代码：</p><pre><code class="javascript">var a = 10;function test(){    var a = 1;    console.log(a);};test();console.log(a);</code></pre><p>结果：</p><pre><code>110</code></pre><p>代码：</p><pre><code class="javascript">var a = 10;function test(){    a = 1;    console.log(a);};test();console.log(a);</code></pre><p>结果:</p><pre><code>11</code></pre><hr><h2 id="javascript中的this"><a href="#javascript中的this" class="headerlink" title="javascript中的this"></a>javascript中的this</h2><blockquote><p>1.在方法中，this 表示该方法所属的对象。<br>2.如果单独使用，this 表示全局对象。<br>3.在函数中，this 指向函数的所属者。<br>4.在函数中，在严格模式下，this 是未定义的(undefined)。<br>5.在事件（HTML 事件句柄）中，this 表示接收事件的元素。<br>6.类似 call() 和 apply() 方法允许切换函数执行的上下文环境（context），可以将 this 引用到任何对象。<br><a href="https://www.runoob.com/js/js-this.html" target="_blank" rel="noopener" >–摘录自菜鸟教程</a></p></blockquote><hr><p>除了上述的情况外，还有一种情况。下面不考虑nodejs环境，在浏览器环境中，进行对每种情况解释。</p><p> 1.在方法中，this 表示该方法所属的对象。<br> 如下面代码所示，this在cout（）方法中代表的就是cout（）方法所属的对象student。</p><p>代码：</p><pre><code class="javascript">var student = {  name: &quot;ming&quot;,  id : &quot;17274000&quot;,  cout : function() {    return this.name + &quot;&#39;s id is &quot; + this.id;  }}; console.log(student.cout());</code></pre><p>结果：</p><pre><code>ming&#39;s id is 17274000</code></pre><p>2.如果单独使用，this 表示全局对象。<br>单独使用就是指不在函数方法或是HTML代码中，此时this就是代指浏览器window。</p><p>代码：</p><pre><code class="javascript">var a = this;console.log(a===window);a = 1;console.log(this.a,window.a);</code></pre><p>结果：</p><pre><code>true1 1</code></pre><p>3.在函数中，this 指向函数的所属者。<br>而浏览器中函数的所属者还是window，所以this还是等于window。</p><p>代码：</p><pre><code class="javascript">function myFunction() {  return this;}console.log(myFunction()===window);</code></pre><p>结果：</p><pre><code>true</code></pre><p>4.在函数中，在严格模式下，this 是未定义的(undefined)。<br>严格模式不允许这样使用，所以返回undefined。</p><p>代码：</p><pre><code class="javascript">&quot;use strict&quot;;function myFunction() {  return this;}console.log(myFunction());</code></pre><p>结果：</p><pre><code>undefined</code></pre><p>5.在事件（HTML 事件句柄）中，this 表示接收事件的元素。<br>如代码所示，this代指的是接收事件的button元素，于是执行了display=‘none’的操作。</p><p>代码：</p><pre><code class="html">&lt;button onclick=&quot;this.style.display=&#39;none&#39;&quot;&gt;点击&lt;/button&gt;</code></pre><p>结果：</p><pre><code class="javascript">按钮消失了</code></pre><p>6.类似 call() 和 apply() 方法允许切换函数执行的上下文环境（context），可以将 this 引用到任何对象。<br>如下所示，this代指了student2对象，利用student1的方法输出了student2.</p><p>代码：</p><pre><code class="javascript">var student1 = {    name: &quot;hong&quot;,    id: &quot;17274010&quot;,    cout: function() {        return this.name + &quot;&#39;s id is &quot; + this.id;    }}var student2 = {    name: &quot;ming&quot;,    id: &quot;17274000&quot;,}var x = student1.cout.call(student2);console.log(x);</code></pre><p>结果：</p><pre><code>ming&#39;s id is 17274000</code></pre><p>7.构造函数中的this<br>虽然js中的构造函数只是被new操作符调用的普通函数，但是它却免去了return this的烦恼。this绑定到了当前的对象。<br><a name="top"></a><br>代码：</p><pre><code class="javascript">function Student(name) {    this.name = name;    this.hello = function () {        console.log(&#39;Hello, &#39; + this.name + &#39;!&#39;);    }}var xiaoming = new Student(&#39;小明&#39;);xiaoming.name;xiaoming.hello();</code></pre><p>结果：</p><pre><code>Hello, 小明!</code></pre><blockquote><p>优先级 <strong>new &gt; 显式 &gt; 隐式 &gt; 默认</strong><br>判断this的方法如下：<br>&lt;1&gt; 函数是否在new中调用（new绑定）？<br>&lt;2&gt;函数是否通过call、apply（显式绑定）或者bind（硬绑定）调用？<br>&lt;3&gt; 函数是否在某个上下文对象中调用（隐式绑定）？<br>&lt;4&gt;如果都不是的话，使用的默认绑定。如果在严格模式下，就绑定到undefined，否则绑定到全局对象。<br><a href='https://www.liaoxuefeng.com/wiki/1022910821149312/1023022126220448' target="_blank" rel="noopener">–摘录自csdn</a></p></blockquote><hr><h2 id="javascript中的面向对象跟其他面向对象程序设计语言，比如java有什么不同"><a href="#javascript中的面向对象跟其他面向对象程序设计语言，比如java有什么不同" class="headerlink" title="javascript中的面向对象跟其他面向对象程序设计语言，比如java有什么不同"></a>javascript中的面向对象跟其他面向对象程序设计语言，比如java有什么不同</h2><blockquote><p>类和实例是大多数面向对象编程语言的基本概念。不过，在JavaScript中，这个概念需要改一改。JavaScript<strong>不区分类和实例的概念</strong>，而是通过<strong>原型</strong>（prototype）来实现面向对象编程。<br><a href='https://www.liaoxuefeng.com/wiki/1022910821149312/1023022126220448' target="_blank" rel="noopener">–摘录自廖雪峰的官方网站</a></p></blockquote><p>js最显著的特点就是没有类。下面简单解释由于没有类js如何实现面向对象。</p><pre><code class="javascript">var Student = {    name: &#39;Robot&#39;,    height: 1.2,    run: function () {        console.log(this.name + &#39; is running...&#39;);    }};var xiaoming = {    name: &#39;小明&#39;};xiaoming.__proto__ = Student;</code></pre><p>小明这个对象是从 Student继承而来的，他可以使用Student的run()方法。<br>但是js中的继承<strong>只是一个对象的原型指向另一个对象</strong>。也就是说对象的原型指向其他对象就可以变成任何对象的“子类”。通过如下的操作，重新为小明指定原型。所以可见js和其他面向对象语言<strong>继承</strong>方式由很大不同。</p><pre><code class="javascript">xiaoming.__proto__ = Bird;</code></pre><p>这样后xiaoming就成了Bird。<br><em>实际情况可以使用Object.create()方法传入一个原型对象</em></p><pre><code class="javascript">var s = Object.create(Student);</code></pre><p>除了上面的构造方法外，还可以使用<a href="#top">上文</a>提及的构造函数new来创建新的对象。<br>这里的<strong>new</strong>是第二处明显的不同。由于没有类，所以是对象直接绑定对象。而实质上，js这里仅仅是借用了关键字 new，仅此而已；换句话说，ECMA 完全可以用其它非new 表达式来用调用构造器创建对象。</p><p><a href="https://blog.csdn.net/fhjdzkp/article/details/79707749" target="_blank" rel="noopener">一个形象的解释</a></p><p>在 ES6 规范中，引入了 class 的概念。但是js 中任然并没有一个真正的 class 原始类型，class实则还是一个函数，它的原理还是是<strong>原型继承</strong>。</p><hr><h2 id="javascript中的闭包怎么理解"><a href="#javascript中的闭包怎么理解" class="headerlink" title="javascript中的闭包怎么理解"></a>javascript中的闭包怎么理解</h2><blockquote><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。<br><a href='https://www.liaoxuefeng.com/wiki/1022910821149312/1023022126220448' target="_blank" rel="noopener">–摘录自廖雪峰的官方网站</a></p></blockquote><hr><p>闭包就是一种程序结构。高阶函数返回了一个函数，这样的返回内部的函数中就可能会包含外部函数的相关参数和变量。</p><pre><code class="javascript">function lazy_sum(arr) {    var sum = function () {        return arr.reduce(function (x, y) {            return x + y;        });    }    return sum;}</code></pre><p>如上所示，lazy_sum它返回求和的结果是function sum（），作为一般的函数返回后与原函数就没关系，但是现在它的arr还是被新函数继续使用。<br><strong>换句话说就是返回的函数携带了某个值，这个值可以看成是私有变量，外部可以通过调用这个返回的函数来获取这个值。</strong><br>利用闭包原理可以写出计数器：</p><pre><code class="javascript">var add = (function(){    var count = 0;//外部访问的计数器，局部变量.    var fun = function(){        return ++count;    }    return fun;})();</code></pre><blockquote><p>参考<br>CSDN，廖雪峰的官方网站，菜鸟教程</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>js</tag>
      
      <tag>卓越工程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的blog</title>
    <link href="/2020/03/03/%E6%88%91%E7%9A%84blog/"/>
    <url>/2020/03/03/%E6%88%91%E7%9A%84blog/</url>
    
    <content type="html"><![CDATA[<h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h2><p>这是我的第一篇blog。</p><hr><p>测试。。。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=4862593493&auto=1&height=430"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>life</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
